extends GdUnitTestSuite

## Test suite for GBTestInjectorSystem to verify automatic container duplication
## and test isolation functionality.

var runner: GdUnitSceneRunner
var env: CollisionTestEnvironment

func before_test() -> void:
	# Use scene_runner for proper test environment setup
	# This ensures proper validation and avoids validation error floods
	runner = scene_runner(GBTestConstants.COLLISION_TEST_ENV_UID)
	runner.simulate_frames(2)  # Allow initialization
	env = runner.scene() as CollisionTestEnvironment

func after_test() -> void:
	runner = null
	env = null

## Test that GBTestInjectorSystem can be instantiated directly
func test_injector_system_instantiation() -> void:
	var injector: GBTestInjectorSystem = auto_free(GBTestInjectorSystem.new())
 assert_object(injector).append_failure_message( "GBTestInjectorSystem should instantiate successfully" ) assert_object(injector).append_failure_message("Object assertion failed").is_instanceof(GBInjectorSystem).append_failure_message( "GBTestInjectorSystem should extend GBInjectorSystem" ) ## Test that composition_container property exists and can be set func test_composition_container_property_assignment() -> void: var injector: GBTestInjectorSystem = auto_free(GBTestInjectorSystem.new()) # Create a test container var original_container: GBCompositionContainer = auto_free(GBCompositionContainer.new()) original_container.get_logger().log_debug("Original container created") # Assign to injector injector.composition_container = original_container # Verify assignment worked assert_object(injector.composition_container).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Composition container should be assigned" ) ## Test direct property assignment behavior (known limitation) ## NOTE: Direct property assignment does NOT trigger duplication because GDScript ## doesn't allow overriding setters for inherited @export properties. ## Duplication only works during scene loading via _ready(). ## This is an acceptable limitation since tests primarily use scene-loaded instances. func test_automatic_container_duplication() -> void: var injector: GBTestInjectorSystem = auto_free(GBTestInjectorSystem.new()) # Create a test container var original_container: GBCompositionContainer = auto_free(GBCompositionContainer.new()) var original_id: int = original_container.get_instance_id() # Assign to injector (direct assignment does NOT duplicate) injector.composition_container = original_container # Get the container from injector var injector_container: GBCompositionContainer = injector.composition_container assert_object(injector_container).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Injector should have a container after assignment" ) # For direct assignment, container is NOT duplicated (same instance) # This is a known limitation - duplication only works during scene loading var injector_id: int = injector_container.get_instance_id() assert_int(injector_id).append_failure_message("Integer assertion failed").is_equal(original_id).append_failure_message( "Direct assignment does NOT duplicate (expected behavior). Original: %d, Injector: %d" % [original_id, injector_id] ) ## Test that multiple assignments don't cause double-duplication func test_no_double_duplication() -> void: var injector: GBTestInjectorSystem = auto_free(GBTestInjectorSystem.new()) # First assignment var container1: GBCompositionContainer = auto_free(GBCompositionContainer.new()) injector.composition_container = container1 var first_id: int = injector.composition_container.get_instance_id() # Second assignment (should not duplicate again) var container2: GBCompositionContainer = auto_free(GBCompositionContainer.new()) injector.composition_container = container2 var second_id: int = injector.composition_container.get_instance_id() # The _has_duplicated flag should prevent duplication on second assignment # So second_id should be different from first_id (new container assigned) assert_int(second_id).append_failure_message("Integer assertion failed").is_not_equal(first_id).append_failure_message( "Second container assignment should work (different IDs). First: %d, Second: %d" % [first_id, second_id] ) ## Test that null assignment works correctly func test_null_assignment() -> void: var injector: GBTestInjectorSystem = auto_free(GBTestInjectorSystem.new()) # Assign null injector.composition_container = null # Verify it's null assert_object(injector.composition_container).append_failure_message("Object assertion failed").is_null().append_failure_message( "Null assignment should result in null container" ) ## Test scene loading with injector system func test_scene_loading_with_injector() -> void: # Env is already loaded via scene_runner assert_object(env).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Test environment should be loaded" ) # Find the injector node var injector: Node = env.injector assert_object(injector).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Environment should have GBInjectorSystem" ) assert_object(injector).append_failure_message("Object assertion failed").is_instanceof(GBTestInjectorSystem).append_failure_message( "Injector should be GBTestInjectorSystem type. Got: %s" % injector.get_class() ) ## Test that injector has composition_container after scene load func test_injector_has_container_after_scene_load() -> void: # Get injector from environment var injector: GBTestInjectorSystem = env.injector as GBTestInjectorSystem assert_object(injector).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Should find GBTestInjectorSystem in environment" ) # Check if composition_container is set var container: GBCompositionContainer = injector.composition_container assert_object(container).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Injector should have composition_container after scene load. Injector: %s, Container: %s" % [ injector, container ] ) # Verify container has a logger (basic validation) var logger: GBLogger = container.get_logger() assert_object(logger).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Container should have a logger" ) ## Test that container was duplicated during scene load (test isolation) func test_container_duplicated_during_scene_load() -> void: # Load the original container resource directly var original_resource_path: String = GBTestConstants.TEST_PATH_COMPOSITION_CONTAINER_TEST_RESOURCE var original_container: GBCompositionContainer = load(original_resource_path) var original_id: int = original_container.get_instance_id() # Get the container from the injector in the environment var injector_node: Node = env.injector assert_object(injector_node).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Should find GBInjectorSystem node in environment" ) # Use get() to access the composition_container property from the script var scene_container: GBCompositionContainer = injector_node.get("composition_container") assert_object(scene_container).append_failure_message("Object assertion failed").is_not_null().append_failure_message( "Environment injector should have a container. Script: %s" % (injector_node.get_script().resource_path if injector_node.get_script() else "none") ) var scene_id: int = scene_container.get_instance_id() # Verify they're different instances (duplication occurred) assert_int(scene_id).append_failure_message("Integer assertion failed").is_not_equal(original_id).append_failure_message( "Scene container should be duplicated from resource. Original ID: %d, Scene ID: %d" % [original_id, scene_id] ).is_not_null()