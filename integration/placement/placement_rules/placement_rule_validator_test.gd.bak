## Test suite for PlacementRuleValidator pure logic class.
## Tests pure functions without complex object setup.
extends GdUnitTestSuite
@warning_ignore("unused_parameter")
@warning_ignore("return_value_discarded")

func test_validate_rules_empty_array() -> void:
	var empty_rules: Array[PlacementRule] = []
	var params = RuleValidationParameters.new(null, null, null, null)
	
	var results = PlacementRuleValidator.validate_rules(empty_rules, params)
	
	assert_bool(results.is_successful).is_false()
	assert_str(results.message).contains("No rules provided")
	assert_array(results.issues).contains("Rules array is empty")

func test_validate_rules_with_null_rules() -> void:
	var rules_with_null: Array[PlacementRule] = [null, null]
	var params = RuleValidationParameters.new(null, null, null, null)
	
	var results = PlacementRuleValidator.validate_rules(rules_with_null, params)
	
	assert_bool(results.is_successful).is_false()
	assert_array(results.issues).contains("Null rule in rules array")

func test_setup_rules_empty_array() -> void:
	var empty_rules: Array[PlacementRule] = []
	var params = RuleValidationParameters.new(null, null, null, null)
	
	var issues = PlacementRuleValidator.setup_rules(empty_rules, params)
	
	assert_dict(issues).is_empty()

func test_setup_rules_with_null_params() -> void:
	var rules: Array[PlacementRule] = [PlacementRule.new()]
	
	var issues = PlacementRuleValidator.setup_rules(rules, null)
	
	assert_dict(issues).is_not_empty()
	assert_array(issues[rules[0]]).contains("RuleValidationParameters are null")

func test_are_rules_ready_empty_array() -> void:
	var empty_rules: Array[PlacementRule] = []
	
	var ready = PlacementRuleValidator.are_rules_ready(empty_rules)
	
	assert_bool(ready).is_true()

func test_are_rules_ready_with_null_rules() -> void:
	var rules_with_null: Array[PlacementRule] = [null, PlacementRule.new()]
	
	var ready = PlacementRuleValidator.are_rules_ready(rules_with_null)
	
	assert_bool(ready).is_false()

func test_combine_rules_basic() -> void:
	var base_rules: Array[PlacementRule] = [PlacementRule.new()]
	var additional_rules: Array[PlacementRule] = [PlacementRule.new()]
	
	var combined = PlacementRuleValidator.combine_rules(base_rules, additional_rules, false)
	
	assert_int(combined.size()).is_equal(2)

func test_combine_rules_ignore_base() -> void:
	var base_rules: Array[PlacementRule] = [PlacementRule.new()]
	var additional_rules: Array[PlacementRule] = [PlacementRule.new()]
	
	var combined = PlacementRuleValidator.combine_rules(base_rules, additional_rules, true)
	
	assert_int(combined.size()).is_equal(1)

func test_combine_rules_remove_duplicates() -> void:
	var rule1 = PlacementRule.new()
	var rule2 = PlacementRule.new()
	var base_rules: Array[PlacementRule] = [rule1, rule2]
	var additional_rules: Array[PlacementRule] = [rule1]  # Duplicate
	
	var combined = PlacementRuleValidator.combine_rules(base_rules, additional_rules, false)
	
	assert_int(combined.size()).is_equal(2)  # Should not have duplicates
